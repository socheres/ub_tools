/**
 * \brief Utility for updating issn information
 * \author Steven Lolong (steven.lolong@uni-tuebingen.de)
 *
 * \copyright 2023 TÃ¼bingen University Library.  All rights reserved.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <fstream>
#include <iostream>
#include <sstream>
#include "CORE.h"
#include "FileUtil.h"
#include "MARC.h"
#include "util.h"

namespace {
[[noreturn]] void Usage() {
    ::Usage(
        "marc_input_articles marc_input_journals marc_output_articles"
        "\n"
        "- marc_input_articles is a file containing all article information taken from CORE.\n"
        "- marc_input_journals is a file containing journal information. Please use issn_lookup.py to generate this file.\n"
        "- marc_output_articles is an output file generated by this tool.\n");

    std::exit(EXIT_FAILURE);
}

struct SubFieldInfo {
    std::string t_;
    std::string w_;
    std::string x_;
    int online_version_counter_;
    int printed_version_counter_;
    bool is_online_;
    bool is_valid_;

    SubFieldInfo() {
        online_version_counter_ = 0;
        printed_version_counter_ = 0;
        is_valid_ = false;
        is_online_ = false;
        t_ = "";
        w_ = "";
        x_ = "";
    }

    SubFieldInfo(MARC::Record &record) {
        online_version_counter_ = 0;
        printed_version_counter_ = 0;
        is_valid_ = false;
        is_online_ = false;
        for (auto &field : record) {
            if (field.getTag() == "001")
                w_ = "(DE-627)" + field.getContents();

            if (field.getTag() == "022")
                x_ = field.getFirstSubfieldWithCode('a');

            if (field.getTag() == "245") {
                MARC::Subfields subfields(field.getSubfields());
                std::string subfield_a(subfields.getFirstSubfieldWithCode('a'));
                std::string subfield_b(subfields.getFirstSubfieldWithCode('b'));
                if ((not subfield_a.empty()) && (not subfield_b.empty()))
                    t_ = subfield_a + " " + subfield_b;
                else if ((not subfield_a.empty()) && subfield_b.empty())
                    t_ = subfield_a;
                else if (subfield_a.empty() && (not subfield_b.empty()))
                    t_ = subfield_b;
                else
                    t_ = "";
            }

            if (field.getTag() == "300")
                is_online_ = (field.getFirstSubfieldWithCode('a') == "Online-Ressource");
        }
    }
};

std::string join(std::vector<std::string> const &strings, std::string delim) {
    std::stringstream ss;
    std::copy(strings.begin(), strings.end(), std::ostream_iterator<std::string>(ss, delim.c_str()));
    return ss.str();
}

void UpdateSubfield(MARC::Subfields &subfields, const SubFieldInfo &sub_field_info) {
    if (!subfields.replaceFirstSubfield('i', "In:"))
        subfields.addSubfield('i', "In:");
    if (!subfields.replaceFirstSubfield('x', sub_field_info.x_))
        subfields.addSubfield('x', sub_field_info.x_);
    if (!subfields.replaceFirstSubfield('w', sub_field_info.w_))
        subfields.addSubfield('w', sub_field_info.w_);

    if (not sub_field_info.t_.empty()) {
        if (!subfields.replaceFirstSubfield('t', sub_field_info.t_))
            subfields.addSubfield('t', sub_field_info.t_);
    }
}

void UpdateJournalValidity(std::map<std::string, SubFieldInfo> &journal_cache) {
    std::vector<std::string> valid_online, invalid_online, valid_printed, invalid_printed;
    std::ofstream f_valid_online("issn_valid_online.log"), f_invalid_online("issn_invalid_online.log"),
        f_valid_printed("issn_valid_printed.log"), f_invalid_printed("issn_invalid_printed.log");

    // check whether the issn is occur more than once
    for (auto sfi : journal_cache) {
        if (sfi.second.online_version_counter_ == 1) {
            journal_cache[sfi.first].is_valid_ = true;
            valid_online.emplace_back(sfi.first);
        } else if (sfi.second.online_version_counter_ > 1) {
            journal_cache[sfi.first].is_valid_ = false;
            invalid_online.emplace_back(sfi.first);
        } else if (sfi.second.online_version_counter_ == 0)
            if (sfi.second.printed_version_counter_ == 1) {
                journal_cache[sfi.first].is_valid_ = true;
                valid_printed.emplace_back(sfi.first);
            } else {
                journal_cache[sfi.first].is_valid_ = false;
                invalid_printed.emplace_back(sfi.first);
            }
    }
    if (f_valid_online.is_open())
        f_valid_online << join(valid_online, "\n");
    if (f_invalid_online.is_open())
        f_invalid_online << join(invalid_online, "\n");
    if (f_valid_printed.is_open())
        f_valid_printed << join(valid_printed, "\n");
    if (f_invalid_printed.is_open())
        f_invalid_printed << join(invalid_printed, "\n");
}

std::map<std::string, SubFieldInfo> BuildJournalCache(const std::string &input_journal_filename) {
    std::map<std::string, SubFieldInfo> journal_cache;
    auto input_journal_file(MARC::Reader::Factory(input_journal_filename));
    int record_counter(0);

    while (MARC::Record record = input_journal_file->read()) {
        SubFieldInfo sub_field_info_of_record(record);

        // if sub_info is exist in the cache
        if (journal_cache.find(sub_field_info_of_record.x_) != journal_cache.end()) {
            if (journal_cache[sub_field_info_of_record.x_].is_online_) {
                if (sub_field_info_of_record.is_online_)
                    ++journal_cache[sub_field_info_of_record.x_].online_version_counter_;
                else
                    ++journal_cache[sub_field_info_of_record.x_].printed_version_counter_;
            } else {
                if (sub_field_info_of_record.is_online_) {
                    sub_field_info_of_record.printed_version_counter_ = journal_cache[sub_field_info_of_record.x_].printed_version_counter_;
                    journal_cache[sub_field_info_of_record.x_] = sub_field_info_of_record;
                    ++journal_cache[sub_field_info_of_record.x_].online_version_counter_;
                } else
                    ++journal_cache[sub_field_info_of_record.x_].printed_version_counter_;
            }
        }
        // sub_info is not in the cache
        else
        {
            journal_cache.emplace(sub_field_info_of_record.x_, sub_field_info_of_record);
            (sub_field_info_of_record.is_online_ ? ++journal_cache[sub_field_info_of_record.x_].online_version_counter_
                                                 : ++journal_cache[sub_field_info_of_record.x_].printed_version_counter_);
        }
        ++record_counter;
    }
    UpdateJournalValidity(journal_cache);

    return journal_cache;
}

void ISSNLookup(char **argv, std::map<std::string, SubFieldInfo> &journal_cache) {
    auto input_file(MARC::Reader::Factory(argv[1]));
    auto output_file(MARC::Writer::Factory(argv[3]));
    int updated_counter(0);
    std::vector<std::string> updated_ppn, ignored_ppn;
    std::ofstream f_updated("issn_updated.log"), f_ignored("issn_ignored.log");

    while (MARC::Record record = input_file->read()) {
        std::string ppn("");
        bool is_updated(false);
        for (auto &field : record) {
            if (field.getTag() == "001")
                ppn = field.getContents();

            if (field.getTag() == "773") {
                const std::string issn(field.getFirstSubfieldWithCode('x'));
                if (not issn.empty()) {
                    // data is found
                    if (journal_cache.find(issn) != journal_cache.end()) {
                        if (journal_cache[issn].is_valid_) {
                            MARC::Subfields subfields(field.getSubfields());
                            UpdateSubfield(subfields, journal_cache[issn]);
                            field.setSubfields(subfields);
                            ++updated_counter;
                        }
                    }
                }
            }
        }
        output_file->write(record);
        if (is_updated)
            updated_ppn.emplace_back(ppn);
        else
            ignored_ppn.emplace_back(ppn);
    }
    if (f_updated.is_open())
        f_updated << join(updated_ppn, "\n");
    if (f_ignored.is_open())
        f_ignored << join(ignored_ppn, "\n");
}
} // end of namespace

int Main(int argc, char **argv) {
    if (argc != 4)
        Usage();

    std::map<std::string, SubFieldInfo> journal_cache(BuildJournalCache(argv[2]));
    ISSNLookup(argv, journal_cache);

    return EXIT_SUCCESS;
}
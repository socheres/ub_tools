/** \brief Utility for merging single CORE results to one target file.
 *  \author Mario Trojan (mario.trojan@uni-tuebingen.de)
 *
 *  \copyright 2022 TÃ¼bingen University Library.  All rights reserved.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#include "CORE.h"
#include "FileUtil.h"
#include "util.h"


namespace {


[[noreturn]] void Usage() {
    ::Usage(
        "input_dir output_file\n"
        "\tinput_dir: The directory generated by core_download which contains all JSON files.\n"
        "\toutput_file: The target path into which the \"results\" sections should be merged.\n\n");
}


} // unnamed namespace


int Main(int argc, char **argv) {
    if (argc != 3)
        Usage();

    // Parse args
    const std::string input_dir(argv[1]);
    const std::string output_file(argv[2]);

    // Reset target file
    if (FileUtil::Exists(output_file))
        throw std::runtime_error("target file already exists: " + output_file);
    FileUtil::AppendString(output_file, "[\n");
    bool first(true);

    // Prepare reading input dir
    FileUtil::Directory input_files(input_dir, ".json$");
    for (const auto &input_file : input_files) {
        LOG_INFO("merging " + input_file.getFullName() + " into " + output_file);
        const CORE::SearchResponse response(FileUtil::ReadStringOrDie(input_file.getFullName()));
        for (const auto &result : response.results_) {
            if (not first)
                FileUtil::AppendString(output_file, ",\n");

            FileUtil::AppendString(output_file, result->toString());
            first = false;
        }
    }

    // Close target file
    FileUtil::AppendString(output_file, "\n]");

    return EXIT_SUCCESS;
}
